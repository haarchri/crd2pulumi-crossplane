// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import {ObjectMeta} from "../meta/v1";

export namespace s3 {
    export namespace v1beta1 {
        /**
         * BucketSpec represents the desired state of the Bucket.
         */
        export interface BucketSpec {
            /**
             * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
             */
            deletionPolicy?: string;
            /**
             * BucketParameters are parameters for configuring the calls made to AWS Bucket API.
             */
            forProvider: outputs.s3.v1beta1.BucketSpecForProvider;
            /**
             * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
             */
            providerConfigRef?: outputs.s3.v1beta1.BucketSpecProviderConfigRef;
            /**
             * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
             */
            providerRef?: outputs.s3.v1beta1.BucketSpecProviderRef;
            /**
             * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
             */
            writeConnectionSecretToRef?: outputs.s3.v1beta1.BucketSpecWriteConnectionSecretToRef;
        }

        /**
         * BucketParameters are parameters for configuring the calls made to AWS Bucket API.
         */
        export interface BucketSpecForProvider {
            /**
             * AccelerateConfiguration configures the transfer acceleration state for an Amazon S3 bucket. For more information, see Amazon S3 Transfer Acceleration (https://docs.aws.amazon.com/AmazonS3/latest/dev/transfer-acceleration.html) in the Amazon Simple Storage Service Developer Guide.
             */
            accelerateConfiguration?: outputs.s3.v1beta1.BucketSpecForProviderAccelerateConfiguration;
            /**
             * The canned ACL to apply to the bucket. Note that either canned ACL or specific access permissions are required. If neither (or both) are provided, the creation of the bucket will fail.
             */
            acl?: string;
            /**
             * Describes the cross-origin access configuration for objects in an Amazon S3 bucket. For more information, see Enabling Cross-Origin Resource Sharing (https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html) in the Amazon Simple Storage Service Developer Guide.
             */
            corsConfiguration?: outputs.s3.v1beta1.BucketSpecForProviderCorsConfiguration;
            /**
             * Allows grantee the read, write, read ACP, and write ACP permissions on the bucket.
             */
            grantFullControl?: string;
            /**
             * Allows grantee to list the objects in the bucket.
             */
            grantRead?: string;
            /**
             * Allows grantee to read the bucket ACL.
             */
            grantReadAcp?: string;
            /**
             * Allows grantee to create, overwrite, and delete any object in the bucket.
             */
            grantWrite?: string;
            /**
             * Allows grantee to write the ACL for the applicable bucket.
             */
            grantWriteAcp?: string;
            /**
             * Creates a new lifecycle configuration for the bucket or replaces an existing lifecycle configuration. For information about lifecycle configuration, see Managing Access Permissions to Your Amazon S3 Resources (https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html).
             */
            lifecycleConfiguration?: outputs.s3.v1beta1.BucketSpecForProviderLifecycleConfiguration;
            /**
             * LocationConstraint specifies the Region where the bucket will be created. It is a required field.
             */
            locationConstraint: string;
            /**
             * Specifies logging parameters for an Amazon S3 bucket. Set the logging parameters for a bucket and to specify permissions for who can view and modify the logging parameters. See the AWS API reference guide for Amazon Simple Storage Service's API operation PutBucketLogging for usage and error information. See also, https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/PutBucketLogging
             */
            loggingConfiguration?: outputs.s3.v1beta1.BucketSpecForProviderLoggingConfiguration;
            /**
             * Enables notifications of specified events for a bucket. For more information about event notifications, see Configuring Event Notifications (https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html).
             */
            notificationConfiguration?: outputs.s3.v1beta1.BucketSpecForProviderNotificationConfiguration;
            /**
             * Specifies whether you want S3 Object Lock to be enabled for the new bucket.
             */
            objectLockEnabledForBucket?: boolean;
            /**
             * Specifies payer parameters for an Amazon S3 bucket. For more information, see Request Pays buckets (https://docs.aws.amazon.com/AmazonS3/latest/dev/RequesterPaysBuckets.html) in the Amazon Simple Storage Service Developer Guide.
             */
            paymentConfiguration?: outputs.s3.v1beta1.BucketSpecForProviderPaymentConfiguration;
            /**
             * Creates a replication configuration or replaces an existing one. For more information, see Replication (https://docs.aws.amazon.com/AmazonS3/latest/dev/replication.html) in the Amazon S3 Developer Guide.
             */
            replicationConfiguration?: outputs.s3.v1beta1.BucketSpecForProviderReplicationConfiguration;
            /**
             * Specifies default encryption for a bucket using server-side encryption with Amazon S3-managed keys (SSE-S3) or customer master keys stored in AWS KMS (SSE-KMS). For information about the Amazon S3 default encryption feature, see Amazon S3 Default Bucket Encryption (https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-encryption.html) in the Amazon Simple Storage Service Developer Guide.
             */
            serverSideEncryptionConfiguration?: outputs.s3.v1beta1.BucketSpecForProviderServerSideEncryptionConfiguration;
            /**
             * Sets the tags for a bucket. Use tags to organize your AWS bill to reflect your own cost structure. For more information, see Billing and usage reporting for S3 buckets. (https://docs.aws.amazon.com/AmazonS3/latest/dev/BucketBilling.html) in the Amazon Simple Storage Service Developer Guide.
             */
            tagging?: outputs.s3.v1beta1.BucketSpecForProviderTagging;
            /**
             * VersioningConfiguration describes the versioning state of an Amazon S3 bucket. See the AWS API reference guide for Amazon Simple Storage Service's API operation PutBucketVersioning for usage and error information. See also, https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/PutBucketVersioning
             */
            versioningConfiguration?: outputs.s3.v1beta1.BucketSpecForProviderVersioningConfiguration;
            /**
             * Specifies website configuration parameters for an Amazon S3 bucket. See the AWS API reference guide for Amazon Simple Storage Service's API operation PutBucketWebsite for usage and error information. See also, https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/PutBucketWebsite
             */
            websiteConfiguration?: outputs.s3.v1beta1.BucketSpecForProviderWebsiteConfiguration;
        }

        /**
         * AccelerateConfiguration configures the transfer acceleration state for an Amazon S3 bucket. For more information, see Amazon S3 Transfer Acceleration (https://docs.aws.amazon.com/AmazonS3/latest/dev/transfer-acceleration.html) in the Amazon Simple Storage Service Developer Guide.
         */
        export interface BucketSpecForProviderAccelerateConfiguration {
            /**
             * Status specifies the transfer acceleration status of the bucket.
             */
            status: string;
        }

        /**
         * Describes the cross-origin access configuration for objects in an Amazon S3 bucket. For more information, see Enabling Cross-Origin Resource Sharing (https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html) in the Amazon Simple Storage Service Developer Guide.
         */
        export interface BucketSpecForProviderCorsConfiguration {
            /**
             * A set of origins and methods (cross-origin access that you want to allow). You can add up to 100 rules to the configuration.
             */
            corsRules: outputs.s3.v1beta1.BucketSpecForProviderCorsConfigurationCorsRules[];
        }

        /**
         * CORSRule specifies a cross-origin access rule for an Amazon S3 bucket.
         */
        export interface BucketSpecForProviderCorsConfigurationCorsRules {
            /**
             * Headers that are specified in the Access-Control-Request-Headers header. These headers are allowed in a preflight OPTIONS request. In response to any preflight OPTIONS request, Amazon S3 returns any requested headers that are allowed.
             */
            allowedHeaders?: string[];
            /**
             * An HTTP method that you allow the origin to execute. Valid values are GET, PUT, HEAD, POST, and DELETE.
             */
            allowedMethods: string[];
            /**
             * One or more origins you want customers to be able to access the bucket from.
             */
            allowedOrigins: string[];
            /**
             * One or more headers in the response that you want customers to be able to access from their applications (for example, from a JavaScript XMLHttpRequest object).
             */
            exposeHeaders?: string[];
            /**
             * The time in seconds that your browser is to cache the preflight response for the specified resource.
             */
            maxAgeSeconds?: number;
        }

        /**
         * Creates a new lifecycle configuration for the bucket or replaces an existing lifecycle configuration. For information about lifecycle configuration, see Managing Access Permissions to Your Amazon S3 Resources (https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html).
         */
        export interface BucketSpecForProviderLifecycleConfiguration {
            /**
             * A lifecycle rule for individual objects in an Amazon S3 bucket. 
             *  Rules is a required field
             */
            rules: outputs.s3.v1beta1.BucketSpecForProviderLifecycleConfigurationRules[];
        }

        /**
         * LifecycleRule for individual objects in an Amazon S3 bucket.
         */
        export interface BucketSpecForProviderLifecycleConfigurationRules {
            /**
             * Specifies the days since the initiation of an incomplete multipart upload that Amazon S3 will wait before permanently removing all parts of the upload. For more information, see Aborting Incomplete Multipart Uploads Using a Bucket Lifecycle Policy (https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config) in the Amazon Simple Storage Service Developer Guide.
             */
            abortIncompleteMultipartUpload?: outputs.s3.v1beta1.BucketSpecForProviderLifecycleConfigurationRulesAbortIncompleteMultipartUpload;
            /**
             * Specifies the expiration for the lifecycle of the object in the form of date, days and, whether the object has a delete marker.
             */
            expiration?: outputs.s3.v1beta1.BucketSpecForProviderLifecycleConfigurationRulesExpiration;
            /**
             * The Filter is used to identify objects that a Lifecycle Rule applies to. A Filter must have exactly one of Prefix, Tag, or And specified.
             */
            filter?: outputs.s3.v1beta1.BucketSpecForProviderLifecycleConfigurationRulesFilter;
            /**
             * Unique identifier for the rule. The value cannot be longer than 255 characters.
             */
            id?: string;
            /**
             * Specifies when noncurrent object versions expire. Upon expiration, Amazon S3 permanently deletes the noncurrent object versions. You set this lifecycle configuration action on a bucket that has versioning enabled (or suspended) to request that Amazon S3 delete noncurrent object versions at a specific period in the object's lifetime.
             */
            noncurrentVersionExpiration?: outputs.s3.v1beta1.BucketSpecForProviderLifecycleConfigurationRulesNoncurrentVersionExpiration;
            /**
             * Specifies the transition rule for the lifecycle rule that describes when noncurrent objects transition to a specific storage class. If your bucket is versioning-enabled (or versioning is suspended), you can set this action to request that Amazon S3 transition noncurrent object versions to a specific storage class at a set period in the object's lifetime.
             */
            noncurrentVersionTransitions?: outputs.s3.v1beta1.BucketSpecForProviderLifecycleConfigurationRulesNoncurrentVersionTransitions[];
            /**
             * If 'Enabled', the rule is currently being applied. If 'Disabled', the rule is not currently being applied. 
             *  Status is a required field, valid values are Enabled or Disabled
             */
            status: string;
            /**
             * Specifies when an Amazon S3 object transitions to a specified storage class.
             */
            transitions?: outputs.s3.v1beta1.BucketSpecForProviderLifecycleConfigurationRulesTransitions[];
        }

        /**
         * Specifies the days since the initiation of an incomplete multipart upload that Amazon S3 will wait before permanently removing all parts of the upload. For more information, see Aborting Incomplete Multipart Uploads Using a Bucket Lifecycle Policy (https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config) in the Amazon Simple Storage Service Developer Guide.
         */
        export interface BucketSpecForProviderLifecycleConfigurationRulesAbortIncompleteMultipartUpload {
            /**
             * Specifies the number of days after which Amazon S3 aborts an incomplete multipart upload.
             */
            daysAfterInitiation: number;
        }

        /**
         * Specifies the expiration for the lifecycle of the object in the form of date, days and, whether the object has a delete marker.
         */
        export interface BucketSpecForProviderLifecycleConfigurationRulesExpiration {
            /**
             * Indicates at what date the object is to be moved or deleted.
             */
            date?: string;
            /**
             * Indicates the lifetime, in days, of the objects that are subject to the rule. The value must be a non-zero positive integer.
             */
            days?: number;
            /**
             * Indicates whether Amazon S3 will remove a delete marker with no noncurrent versions. If set to true, the delete marker will be expired; if set to false the policy takes no action. This cannot be specified with Days or Date in a Lifecycle Expiration Policy.
             */
            expiredObjectDeleteMarker?: boolean;
        }

        /**
         * The Filter is used to identify objects that a Lifecycle Rule applies to. A Filter must have exactly one of Prefix, Tag, or And specified.
         */
        export interface BucketSpecForProviderLifecycleConfigurationRulesFilter {
            /**
             * This is used in a Lifecycle Rule Filter to apply a logical AND to two or more predicates. The Lifecycle Rule will apply to any object matching all of the predicates configured inside the And operator.
             */
            and?: outputs.s3.v1beta1.BucketSpecForProviderLifecycleConfigurationRulesFilterAnd;
            /**
             * Prefix identifying one or more objects to which the rule applies.
             */
            prefix?: string;
            /**
             * This tag must exist in the object's tag set in order for the rule to apply.
             */
            tag?: outputs.s3.v1beta1.BucketSpecForProviderLifecycleConfigurationRulesFilterTag;
        }

        /**
         * This is used in a Lifecycle Rule Filter to apply a logical AND to two or more predicates. The Lifecycle Rule will apply to any object matching all of the predicates configured inside the And operator.
         */
        export interface BucketSpecForProviderLifecycleConfigurationRulesFilterAnd {
            /**
             * Prefix identifying one or more objects to which the rule applies.
             */
            prefix?: string;
            /**
             * All of these tags must exist in the object's tag set in order for the rule to apply.
             */
            tags: outputs.s3.v1beta1.BucketSpecForProviderLifecycleConfigurationRulesFilterAndTags[];
        }

        /**
         * Tag is a container for a key value name pair.
         */
        export interface BucketSpecForProviderLifecycleConfigurationRulesFilterAndTags {
            /**
             * Name of the tag. Key is a required field
             */
            key: string;
            /**
             * Value of the tag. Value is a required field
             */
            value: string;
        }

        /**
         * This tag must exist in the object's tag set in order for the rule to apply.
         */
        export interface BucketSpecForProviderLifecycleConfigurationRulesFilterTag {
            /**
             * Name of the tag. Key is a required field
             */
            key: string;
            /**
             * Value of the tag. Value is a required field
             */
            value: string;
        }

        /**
         * Specifies when noncurrent object versions expire. Upon expiration, Amazon S3 permanently deletes the noncurrent object versions. You set this lifecycle configuration action on a bucket that has versioning enabled (or suspended) to request that Amazon S3 delete noncurrent object versions at a specific period in the object's lifetime.
         */
        export interface BucketSpecForProviderLifecycleConfigurationRulesNoncurrentVersionExpiration {
            /**
             * Specifies the number of days an object is noncurrent before Amazon S3 can perform the associated action. For information about the noncurrent days calculations, see How Amazon S3 Calculates When an Object Became Noncurrent (https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html#non-current-days-calculations) in the Amazon Simple Storage Service Developer Guide.
             */
            noncurrentDays?: number;
        }

        /**
         * NoncurrentVersionTransition contains the transition rule that describes when noncurrent objects transition to the STANDARD_IA, ONEZONE_IA, INTELLIGENT_TIERING, GLACIER, or DEEP_ARCHIVE storage class. If your bucket is versioning-enabled (or versioning is suspended), you can set this action to request that Amazon S3 transition noncurrent object versions to the STANDARD_IA, ONEZONE_IA, INTELLIGENT_TIERING, GLACIER, or DEEP_ARCHIVE storage class at a specific period in the object's lifetime.
         */
        export interface BucketSpecForProviderLifecycleConfigurationRulesNoncurrentVersionTransitions {
            /**
             * Specifies the number of days an object is noncurrent before Amazon S3 can perform the associated action. For information about the noncurrent days calculations, see How Amazon S3 Calculates How Long an Object Has Been Noncurrent (https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html#non-current-days-calculations) in the Amazon Simple Storage Service Developer Guide.
             */
            noncurrentDays?: number;
            /**
             * The class of storage used to store the object. Valid values are: GLACIER, STANDARD_IA, ONEZONE_IA, INTELLIGENT_TIERING, DEEP_ARCHIVE
             */
            storageClass: string;
        }

        /**
         * Transition specifies when an object transitions to a specified storage class. For more information about Amazon S3 lifecycle configuration rules, see Transitioning Objects Using Amazon S3 Lifecycle (https://docs.aws.amazon.com/AmazonS3/latest/dev/lifecycle-transition-general-considerations.html) in the Amazon Simple Storage Service Developer Guide.
         */
        export interface BucketSpecForProviderLifecycleConfigurationRulesTransitions {
            /**
             * Indicates when objects are transitioned to the specified storage class. The date value must be in ISO 8601 format. The time is always midnight UTC.
             */
            date?: string;
            /**
             * Indicates the number of days after creation when objects are transitioned to the specified storage class. The value must be a positive integer.
             */
            days?: number;
            /**
             * The storage class to which you want the object to transition. Valid values are: GLACIER, STANDARD_IA, ONEZONE_IA, INTELLIGENT_TIERING, DEEP_ARCHIVE
             */
            storageClass: string;
        }

        /**
         * Specifies logging parameters for an Amazon S3 bucket. Set the logging parameters for a bucket and to specify permissions for who can view and modify the logging parameters. See the AWS API reference guide for Amazon Simple Storage Service's API operation PutBucketLogging for usage and error information. See also, https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/PutBucketLogging
         */
        export interface BucketSpecForProviderLoggingConfiguration {
            /**
             * TargetBucket where logs will be stored, it can be the same bucket. At least one of targetBucket, targetBucketRef or targetBucketSelector is required.
             */
            targetBucket?: string;
            /**
             * TargetBucketRef references an S3Bucket to retrieve its name
             */
            targetBucketRef?: outputs.s3.v1beta1.BucketSpecForProviderLoggingConfigurationTargetBucketRef;
            /**
             * TargetBucketSelector selects a reference to an S3Bucket to retrieve its name
             */
            targetBucketSelector?: outputs.s3.v1beta1.BucketSpecForProviderLoggingConfigurationTargetBucketSelector;
            /**
             * Container for granting information.
             */
            targetGrants?: outputs.s3.v1beta1.BucketSpecForProviderLoggingConfigurationTargetGrants[];
            /**
             * A prefix for all log object keys.
             */
            targetPrefix: string;
        }

        /**
         * TargetBucketRef references an S3Bucket to retrieve its name
         */
        export interface BucketSpecForProviderLoggingConfigurationTargetBucketRef {
            /**
             * Name of the referenced object.
             */
            name: string;
        }

        /**
         * TargetBucketSelector selects a reference to an S3Bucket to retrieve its name
         */
        export interface BucketSpecForProviderLoggingConfigurationTargetBucketSelector {
            /**
             * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
             */
            matchControllerRef?: boolean;
            /**
             * MatchLabels ensures an object with matching labels is selected.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * TargetGrant is the container for granting information.
         */
        export interface BucketSpecForProviderLoggingConfigurationTargetGrants {
            /**
             * Logging permissions assigned to the Grantee for the bucket. Valid values are "FULL_CONTROL", "READ", "WRITE"
             */
            bucketLogsPermission: string;
            /**
             * Container for the person being granted permissions.
             */
            targetGrantee: outputs.s3.v1beta1.BucketSpecForProviderLoggingConfigurationTargetGrantsTargetGrantee;
        }

        /**
         * Container for the person being granted permissions.
         */
        export interface BucketSpecForProviderLoggingConfigurationTargetGrantsTargetGrantee {
            /**
             * The canonical user ID of the grantee.
             */
            ID?: string;
            /**
             * URI of the grantee group.
             */
            URI?: string;
            /**
             * Screen name of the grantee.
             */
            displayName?: string;
            /**
             * Email address of the grantee. For a list of all the Amazon S3 supported Regions and endpoints, see Regions and Endpoints (https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region) in the AWS General Reference.
             */
            emailAddress?: string;
            /**
             * Type of grantee Type is a required field
             */
            type: string;
        }

        /**
         * Enables notifications of specified events for a bucket. For more information about event notifications, see Configuring Event Notifications (https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html).
         */
        export interface BucketSpecForProviderNotificationConfiguration {
            /**
             * Describes the AWS Lambda functions to invoke and the events for which to invoke them.
             */
            lambdaFunctionConfigurations?: outputs.s3.v1beta1.BucketSpecForProviderNotificationConfigurationLambdaFunctionConfigurations[];
            /**
             * The Amazon Simple Queue Service queues to publish messages to and the events for which to publish messages.
             */
            queueConfigurations?: outputs.s3.v1beta1.BucketSpecForProviderNotificationConfigurationQueueConfigurations[];
            /**
             * The topic to which notifications are sent and the events for which notifications are generated.
             */
            topicConfigurations?: outputs.s3.v1beta1.BucketSpecForProviderNotificationConfigurationTopicConfigurations[];
        }

        /**
         * LambdaFunctionConfiguration contains the configuration for AWS Lambda notifications.
         */
        export interface BucketSpecForProviderNotificationConfigurationLambdaFunctionConfigurations {
            /**
             * An optional unique identifier for configurations in a notification configuration. If you don't provide one, Amazon S3 will assign an ID.
             */
            ID?: string;
            /**
             * The Amazon S3 bucket event for which to invoke the AWS Lambda function. For more information, see Supported Event Types (https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the Amazon Simple Storage Service Developer Guide. 
             *  Events is a required field A full list of valid events can be found in the Amazon S3 Developer guide https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#notification-how-to-event-types-and-destinations
             */
            events: string[];
            /**
             * Specifies object key name filtering rules. For information about key name filtering, see Configuring Event Notifications (https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the Amazon Simple Storage Service Developer Guide.
             */
            filter?: outputs.s3.v1beta1.BucketSpecForProviderNotificationConfigurationLambdaFunctionConfigurationsFilter;
            /**
             * The Amazon Resource Name (ARN) of the AWS Lambda function that Amazon S3 invokes when the specified event type occurs. 
             *  LambdaFunctionArn is a required field
             */
            lambdaFunctionArn: string;
        }

        /**
         * Specifies object key name filtering rules. For information about key name filtering, see Configuring Event Notifications (https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the Amazon Simple Storage Service Developer Guide.
         */
        export interface BucketSpecForProviderNotificationConfigurationLambdaFunctionConfigurationsFilter {
            /**
             * A container for object key name prefix and suffix filtering rules.
             */
            key?: outputs.s3.v1beta1.BucketSpecForProviderNotificationConfigurationLambdaFunctionConfigurationsFilterKey;
        }

        /**
         * A container for object key name prefix and suffix filtering rules.
         */
        export interface BucketSpecForProviderNotificationConfigurationLambdaFunctionConfigurationsFilterKey {
            /**
             * A list of containers for the key-value pair that defines the criteria for the filter rule.
             */
            filterRules: outputs.s3.v1beta1.BucketSpecForProviderNotificationConfigurationLambdaFunctionConfigurationsFilterKeyFilterRules[];
        }

        /**
         * FilterRule specifies the Amazon S3 object key name to filter on and whether to filter on the suffix or prefix of the key name.
         */
        export interface BucketSpecForProviderNotificationConfigurationLambdaFunctionConfigurationsFilterKeyFilterRules {
            /**
             * The object key name prefix or suffix identifying one or more objects to which the filtering rule applies. The maximum length is 1,024 characters. Overlapping prefixes and suffixes are not supported. For more information, see Configuring Event Notifications (https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the Amazon Simple Storage Service Developer Guide. Valid values are "prefix" or "suffix"
             */
            name: string;
            /**
             * The value that the filter searches for in object key names.
             */
            value?: string;
        }

        /**
         * QueueConfiguration specifies the configuration for publishing messages to an Amazon Simple Queue Service (Amazon SQS) queue when Amazon S3 detects specified events.
         */
        export interface BucketSpecForProviderNotificationConfigurationQueueConfigurations {
            /**
             * An optional unique identifier for configurations in a notification configuration. If you don't provide one, Amazon S3 will assign an ID.
             */
            ID?: string;
            /**
             * A collection of bucket events for which to send notifications 
             *  Events is a required field A full list of valid events can be found in the Amazon S3 Developer guide https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#notification-how-to-event-types-and-destinations
             */
            events: string[];
            /**
             * Specifies object key name filtering rules. For information about key name filtering, see Configuring Event Notifications (https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the Amazon Simple Storage Service Developer Guide.
             */
            filter?: outputs.s3.v1beta1.BucketSpecForProviderNotificationConfigurationQueueConfigurationsFilter;
            /**
             * The Amazon Resource Name (ARN) of the Amazon SQS queue to which Amazon S3 publishes a message when it detects events of the specified type. 
             *  QueueArn is a required field
             */
            queueArn: string;
        }

        /**
         * Specifies object key name filtering rules. For information about key name filtering, see Configuring Event Notifications (https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the Amazon Simple Storage Service Developer Guide.
         */
        export interface BucketSpecForProviderNotificationConfigurationQueueConfigurationsFilter {
            /**
             * A container for object key name prefix and suffix filtering rules.
             */
            key?: outputs.s3.v1beta1.BucketSpecForProviderNotificationConfigurationQueueConfigurationsFilterKey;
        }

        /**
         * A container for object key name prefix and suffix filtering rules.
         */
        export interface BucketSpecForProviderNotificationConfigurationQueueConfigurationsFilterKey {
            /**
             * A list of containers for the key-value pair that defines the criteria for the filter rule.
             */
            filterRules: outputs.s3.v1beta1.BucketSpecForProviderNotificationConfigurationQueueConfigurationsFilterKeyFilterRules[];
        }

        /**
         * FilterRule specifies the Amazon S3 object key name to filter on and whether to filter on the suffix or prefix of the key name.
         */
        export interface BucketSpecForProviderNotificationConfigurationQueueConfigurationsFilterKeyFilterRules {
            /**
             * The object key name prefix or suffix identifying one or more objects to which the filtering rule applies. The maximum length is 1,024 characters. Overlapping prefixes and suffixes are not supported. For more information, see Configuring Event Notifications (https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the Amazon Simple Storage Service Developer Guide. Valid values are "prefix" or "suffix"
             */
            name: string;
            /**
             * The value that the filter searches for in object key names.
             */
            value?: string;
        }

        /**
         * TopicConfiguration specifies the configuration for publication of messages to an Amazon Simple Notification Service (Amazon SNS) topic when Amazon S3 detects specified events.
         */
        export interface BucketSpecForProviderNotificationConfigurationTopicConfigurations {
            /**
             * An optional unique identifier for configurations in a notification configuration. If you don't provide one, Amazon S3 will assign an ID.
             */
            ID?: string;
            /**
             * The Amazon S3 bucket event about which to send notifications. For more information, see Supported Event Types (https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the Amazon Simple Storage Service Developer Guide. 
             *  Events is a required field A full list of valid events can be found in the Amazon S3 Developer guide https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#notification-how-to-event-types-and-destinations
             */
            events: string[];
            /**
             * Specifies object key name filtering rules. For information about key name filtering, see Configuring Event Notifications (https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the Amazon Simple Storage Service Developer Guide.
             */
            filter?: outputs.s3.v1beta1.BucketSpecForProviderNotificationConfigurationTopicConfigurationsFilter;
            /**
             * The Amazon Resource Name (ARN) of the Amazon SNS topic to which Amazon S3 publishes a message when it detects events of the specified type. At least one of topicArn, topicArnRef or topicSelector is required.
             */
            topicArn?: string;
            /**
             * TopicArnRef references an SNS Topic to retrieve its Arn
             */
            topicRef?: outputs.s3.v1beta1.BucketSpecForProviderNotificationConfigurationTopicConfigurationsTopicRef;
            /**
             * TopicArnSelector selects a reference to an SNS Topic to retrieve its Arn
             */
            topicSelector?: outputs.s3.v1beta1.BucketSpecForProviderNotificationConfigurationTopicConfigurationsTopicSelector;
        }

        /**
         * Specifies object key name filtering rules. For information about key name filtering, see Configuring Event Notifications (https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the Amazon Simple Storage Service Developer Guide.
         */
        export interface BucketSpecForProviderNotificationConfigurationTopicConfigurationsFilter {
            /**
             * A container for object key name prefix and suffix filtering rules.
             */
            key?: outputs.s3.v1beta1.BucketSpecForProviderNotificationConfigurationTopicConfigurationsFilterKey;
        }

        /**
         * A container for object key name prefix and suffix filtering rules.
         */
        export interface BucketSpecForProviderNotificationConfigurationTopicConfigurationsFilterKey {
            /**
             * A list of containers for the key-value pair that defines the criteria for the filter rule.
             */
            filterRules: outputs.s3.v1beta1.BucketSpecForProviderNotificationConfigurationTopicConfigurationsFilterKeyFilterRules[];
        }

        /**
         * FilterRule specifies the Amazon S3 object key name to filter on and whether to filter on the suffix or prefix of the key name.
         */
        export interface BucketSpecForProviderNotificationConfigurationTopicConfigurationsFilterKeyFilterRules {
            /**
             * The object key name prefix or suffix identifying one or more objects to which the filtering rule applies. The maximum length is 1,024 characters. Overlapping prefixes and suffixes are not supported. For more information, see Configuring Event Notifications (https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the Amazon Simple Storage Service Developer Guide. Valid values are "prefix" or "suffix"
             */
            name: string;
            /**
             * The value that the filter searches for in object key names.
             */
            value?: string;
        }

        /**
         * TopicArnRef references an SNS Topic to retrieve its Arn
         */
        export interface BucketSpecForProviderNotificationConfigurationTopicConfigurationsTopicRef {
            /**
             * Name of the referenced object.
             */
            name: string;
        }

        /**
         * TopicArnSelector selects a reference to an SNS Topic to retrieve its Arn
         */
        export interface BucketSpecForProviderNotificationConfigurationTopicConfigurationsTopicSelector {
            /**
             * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
             */
            matchControllerRef?: boolean;
            /**
             * MatchLabels ensures an object with matching labels is selected.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * Specifies payer parameters for an Amazon S3 bucket. For more information, see Request Pays buckets (https://docs.aws.amazon.com/AmazonS3/latest/dev/RequesterPaysBuckets.html) in the Amazon Simple Storage Service Developer Guide.
         */
        export interface BucketSpecForProviderPaymentConfiguration {
            /**
             * Payer is a required field, detailing who pays Valid values are "Requester" and "BucketOwner"
             */
            payer: string;
        }

        /**
         * Creates a replication configuration or replaces an existing one. For more information, see Replication (https://docs.aws.amazon.com/AmazonS3/latest/dev/replication.html) in the Amazon S3 Developer Guide.
         */
        export interface BucketSpecForProviderReplicationConfiguration {
            /**
             * The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that Amazon S3 assumes when replicating objects. For more information, see How to Set Up Replication (https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-how-setup.html) in the Amazon Simple Storage Service Developer Guide. 
             *  At least one of role, roleRef or roleSelector fields is required.
             */
            role?: string;
            /**
             * RoleRef references an IAMRole to retrieve its Name
             */
            roleRef?: outputs.s3.v1beta1.BucketSpecForProviderReplicationConfigurationRoleRef;
            /**
             * RoleSelector selects a reference to an IAMRole to retrieve its Name
             */
            roleSelector?: outputs.s3.v1beta1.BucketSpecForProviderReplicationConfigurationRoleSelector;
            /**
             * A container for one or more replication rules. A replication configuration must have at least one rule and can contain a maximum of 1,000 rules. 
             *  Rules is a required field
             */
            rules: outputs.s3.v1beta1.BucketSpecForProviderReplicationConfigurationRules[];
        }

        /**
         * RoleRef references an IAMRole to retrieve its Name
         */
        export interface BucketSpecForProviderReplicationConfigurationRoleRef {
            /**
             * Name of the referenced object.
             */
            name: string;
        }

        /**
         * RoleSelector selects a reference to an IAMRole to retrieve its Name
         */
        export interface BucketSpecForProviderReplicationConfigurationRoleSelector {
            /**
             * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
             */
            matchControllerRef?: boolean;
            /**
             * MatchLabels ensures an object with matching labels is selected.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * ReplicationRule specifies which Amazon S3 objects to replicate and where to store the replicas.
         */
        export interface BucketSpecForProviderReplicationConfigurationRules {
            /**
             * Specifies whether Amazon S3 replicates the delete markers. If you specify a Filter, you must specify this element. However, in the latest version of replication configuration (when Filter is specified), Amazon S3 doesn't replicate delete markers. Therefore, the DeleteMarkerReplication element can contain only <Status>Disabled</Status>. For an example configuration, see Basic Rule Configuration (https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-config-min-rule-config). 
             *  If you don't specify the Filter element, Amazon S3 assumes that the replication configuration is the earlier version, V1. In the earlier version, Amazon S3 handled replication of delete markers differently. For more information, see Backward Compatibility (https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-backward-compat-considerations).
             */
            deleteMarkerReplication?: outputs.s3.v1beta1.BucketSpecForProviderReplicationConfigurationRulesDeleteMarkerReplication;
            /**
             * A container for information about the replication destination and its configurations including enabling the S3 Replication Time Control (S3 RTC). 
             *  Destination is a required field
             */
            destination: outputs.s3.v1beta1.BucketSpecForProviderReplicationConfigurationRulesDestination;
            /**
             * Optional configuration to replicate existing source bucket objects. For more information, see Replicating Existing Objects (https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-what-is-isnot-replicated.html#existing-object-replication) in the Amazon S3 Developer Guide.
             */
            existingObjectReplication?: outputs.s3.v1beta1.BucketSpecForProviderReplicationConfigurationRulesExistingObjectReplication;
            /**
             * A filter that identifies the subset of objects to which the replication rule applies. A Filter must specify exactly one Prefix, Tag, or an And child element.
             */
            filter?: outputs.s3.v1beta1.BucketSpecForProviderReplicationConfigurationRulesFilter;
            /**
             * A unique identifier for the rule. The maximum value is 255 characters.
             */
            id?: string;
            /**
             * The priority associated with the rule. If you specify multiple rules in a replication configuration, Amazon S3 prioritizes the rules to prevent conflicts when filtering. If two or more rules identify the same object based on a specified filter, the rule with higher priority takes precedence. For example: 
             *     * Same object quality prefix-based filter criteria if prefixes you specified    in multiple rules overlap 
             *     * Same object qualify tag-based filter criteria specified in multiple    rules 
             *  For more information, see Replication (https://docs.aws.amazon.com/AmazonS3/latest/dev/replication.html) in the Amazon Simple Storage Service Developer Guide.
             */
            priority?: number;
            /**
             * A container that describes additional filters for identifying the source objects that you want to replicate. You can choose to enable or disable the replication of these objects. Currently, Amazon S3 supports only the filter that you can specify for objects created with server-side encryption using a customer master key (CMK) stored in AWS Key Management Service (SSE-KMS).
             */
            sourceSelectionCriteria?: outputs.s3.v1beta1.BucketSpecForProviderReplicationConfigurationRulesSourceSelectionCriteria;
            /**
             * Specifies whether the rule is enabled. 
             *  Status is a required field Valid values are "Enabled" or "Disabled"
             */
            status: string;
        }

        /**
         * Specifies whether Amazon S3 replicates the delete markers. If you specify a Filter, you must specify this element. However, in the latest version of replication configuration (when Filter is specified), Amazon S3 doesn't replicate delete markers. Therefore, the DeleteMarkerReplication element can contain only <Status>Disabled</Status>. For an example configuration, see Basic Rule Configuration (https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-config-min-rule-config). 
         *  If you don't specify the Filter element, Amazon S3 assumes that the replication configuration is the earlier version, V1. In the earlier version, Amazon S3 handled replication of delete markers differently. For more information, see Backward Compatibility (https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-backward-compat-considerations).
         */
        export interface BucketSpecForProviderReplicationConfigurationRulesDeleteMarkerReplication {
            /**
             * Indicates whether to replicate delete markers. In the current implementation, Amazon S3 doesn't replicate the delete markers. The status must be "Disabled".
             */
            Status: string;
        }

        /**
         * A container for information about the replication destination and its configurations including enabling the S3 Replication Time Control (S3 RTC). 
         *  Destination is a required field
         */
        export interface BucketSpecForProviderReplicationConfigurationRulesDestination {
            /**
             * Specify this only in a cross-account scenario (where source and destination bucket owners are not the same), and you want to change replica ownership to the AWS account that owns the destination bucket. If this is not specified in the replication configuration, the replicas are owned by same AWS account that owns the source object.
             */
            accessControlTranslation?: outputs.s3.v1beta1.BucketSpecForProviderReplicationConfigurationRulesDestinationAccessControlTranslation;
            /**
             * Destination bucket owner account ID. In a cross-account scenario, if you direct Amazon S3 to change replica ownership to the AWS account that owns the destination bucket by specifying the AccessControlTranslation property, this is the account ID of the destination bucket owner. For more information, see Replication Additional Configuration: Changing the Replica Owner (https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-change-owner.html) in the Amazon Simple Storage Service Developer Guide.
             */
            account?: string;
            /**
             * The Amazon Resource Name (ARN) of the bucket where you want Amazon S3 to store the results. At least one of bucket, bucketRef or bucketSelector is required.
             */
            bucket?: string;
            /**
             * BucketRef references a Bucket to retrieve its Name
             */
            bucketRef?: outputs.s3.v1beta1.BucketSpecForProviderReplicationConfigurationRulesDestinationBucketRef;
            /**
             * BucketSelector selects a reference to a Bucket to retrieve its Name
             */
            bucketSelector?: outputs.s3.v1beta1.BucketSpecForProviderReplicationConfigurationRulesDestinationBucketSelector;
            /**
             * A container that provides information about encryption. If SourceSelectionCriteria is specified, you must specify this element.
             */
            encryptionConfiguration?: outputs.s3.v1beta1.BucketSpecForProviderReplicationConfigurationRulesDestinationEncryptionConfiguration;
            /**
             * A container specifying replication metrics-related settings enabling metrics and Amazon S3 events for S3 Replication Time Control (S3 RTC). Must be specified together with a ReplicationTime block.
             */
            metrics?: outputs.s3.v1beta1.BucketSpecForProviderReplicationConfigurationRulesDestinationMetrics;
            /**
             * A container specifying S3 Replication Time Control (S3 RTC), including whether S3 RTC is enabled and the time when all objects and operations on objects must be replicated. Must be specified together with a Metrics block.
             */
            replicationTime?: outputs.s3.v1beta1.BucketSpecForProviderReplicationConfigurationRulesDestinationReplicationTime;
            /**
             * The storage class to use when replicating objects, such as S3 Standard or reduced redundancy. By default, Amazon S3 uses the storage class of the source object to create the object replica. For valid values, see the StorageClass element of the PUT Bucket replication (https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTreplication.html) action in the Amazon Simple Storage Service API Reference.
             */
            storageClass?: string;
        }

        /**
         * Specify this only in a cross-account scenario (where source and destination bucket owners are not the same), and you want to change replica ownership to the AWS account that owns the destination bucket. If this is not specified in the replication configuration, the replicas are owned by same AWS account that owns the source object.
         */
        export interface BucketSpecForProviderReplicationConfigurationRulesDestinationAccessControlTranslation {
            /**
             * Specifies the replica ownership. For default and valid values, see PUT bucket replication (https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTreplication.html) in the Amazon Simple Storage Service API Reference. Owner is a required field
             */
            ownerOverride: string;
        }

        /**
         * BucketRef references a Bucket to retrieve its Name
         */
        export interface BucketSpecForProviderReplicationConfigurationRulesDestinationBucketRef {
            /**
             * Name of the referenced object.
             */
            name: string;
        }

        /**
         * BucketSelector selects a reference to a Bucket to retrieve its Name
         */
        export interface BucketSpecForProviderReplicationConfigurationRulesDestinationBucketSelector {
            /**
             * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
             */
            matchControllerRef?: boolean;
            /**
             * MatchLabels ensures an object with matching labels is selected.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A container that provides information about encryption. If SourceSelectionCriteria is specified, you must specify this element.
         */
        export interface BucketSpecForProviderReplicationConfigurationRulesDestinationEncryptionConfiguration {
            /**
             * Specifies the ID (Key ARN or Alias ARN) of the customer managed customer master key (CMK) stored in AWS Key Management Service (KMS) for the destination bucket. Amazon S3 uses this key to encrypt replica objects. Amazon S3 only supports symmetric customer managed CMKs. For more information, see Using Symmetric and Asymmetric Keys (https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html) in the AWS Key Management Service Developer Guide.
             */
            replicaKmsKeyId: string;
        }

        /**
         * A container specifying replication metrics-related settings enabling metrics and Amazon S3 events for S3 Replication Time Control (S3 RTC). Must be specified together with a ReplicationTime block.
         */
        export interface BucketSpecForProviderReplicationConfigurationRulesDestinationMetrics {
            /**
             * A container specifying the time threshold for emitting the s3:Replication:OperationMissedThreshold event. EventThreshold is a required field
             */
            eventThreshold: outputs.s3.v1beta1.BucketSpecForProviderReplicationConfigurationRulesDestinationMetricsEventThreshold;
            /**
             * Specifies whether the replication metrics are enabled. 
             *  Status is a required field, valid values are "Enabled" and "Disabled"
             */
            status: string;
        }

        /**
         * A container specifying the time threshold for emitting the s3:Replication:OperationMissedThreshold event. EventThreshold is a required field
         */
        export interface BucketSpecForProviderReplicationConfigurationRulesDestinationMetricsEventThreshold {
            /**
             * Contains an integer specifying time in minutes. 
             *  Valid values: 15 minutes.
             */
            minutes: number;
        }

        /**
         * A container specifying S3 Replication Time Control (S3 RTC), including whether S3 RTC is enabled and the time when all objects and operations on objects must be replicated. Must be specified together with a Metrics block.
         */
        export interface BucketSpecForProviderReplicationConfigurationRulesDestinationReplicationTime {
            /**
             * Specifies whether the replication time is enabled Status is a required field Valid values are "Enabled" and "Disabled"
             */
            status: string;
            /**
             * A container specifying the time by which replication should be complete for all objects and operations on objects. Time is a required field
             */
            time: outputs.s3.v1beta1.BucketSpecForProviderReplicationConfigurationRulesDestinationReplicationTimeTime;
        }

        /**
         * A container specifying the time by which replication should be complete for all objects and operations on objects. Time is a required field
         */
        export interface BucketSpecForProviderReplicationConfigurationRulesDestinationReplicationTimeTime {
            /**
             * Contains an integer specifying time in minutes. 
             *  Valid values: 15 minutes.
             */
            minutes: number;
        }

        /**
         * Optional configuration to replicate existing source bucket objects. For more information, see Replicating Existing Objects (https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-what-is-isnot-replicated.html#existing-object-replication) in the Amazon S3 Developer Guide.
         */
        export interface BucketSpecForProviderReplicationConfigurationRulesExistingObjectReplication {
            /**
             * Status is a required field Valid values are "Enabled" and "Disabled"
             */
            status: string;
        }

        /**
         * A filter that identifies the subset of objects to which the replication rule applies. A Filter must specify exactly one Prefix, Tag, or an And child element.
         */
        export interface BucketSpecForProviderReplicationConfigurationRulesFilter {
            /**
             * A container for specifying rule filters. The filters determine the subset of objects to which the rule applies. This element is required only if you specify more than one filter. For example: 
             *     * If you specify both a Prefix and a Tag filter, wrap these filters in    an And tag. 
             *     * If you specify a filter based on multiple tags, wrap the Tag elements    in an And tag.
             */
            and?: outputs.s3.v1beta1.BucketSpecForProviderReplicationConfigurationRulesFilterAnd;
            /**
             * An object key name prefix that identifies the subset of objects to which the rule applies.
             */
            prefix?: string;
            /**
             * A container for specifying a tag key and value. The rule applies only to objects that have the tag in their tag set.
             */
            tag?: outputs.s3.v1beta1.BucketSpecForProviderReplicationConfigurationRulesFilterTag;
        }

        /**
         * A container for specifying rule filters. The filters determine the subset of objects to which the rule applies. This element is required only if you specify more than one filter. For example: 
         *     * If you specify both a Prefix and a Tag filter, wrap these filters in    an And tag. 
         *     * If you specify a filter based on multiple tags, wrap the Tag elements    in an And tag.
         */
        export interface BucketSpecForProviderReplicationConfigurationRulesFilterAnd {
            /**
             * An object key name prefix that identifies the subset of objects to which the rule applies.
             */
            prefix?: string;
            /**
             * An array of tags containing key and value pairs.
             */
            tag?: outputs.s3.v1beta1.BucketSpecForProviderReplicationConfigurationRulesFilterAndTag[];
        }

        /**
         * Tag is a container for a key value name pair.
         */
        export interface BucketSpecForProviderReplicationConfigurationRulesFilterAndTag {
            /**
             * Name of the tag. Key is a required field
             */
            key: string;
            /**
             * Value of the tag. Value is a required field
             */
            value: string;
        }

        /**
         * A container for specifying a tag key and value. The rule applies only to objects that have the tag in their tag set.
         */
        export interface BucketSpecForProviderReplicationConfigurationRulesFilterTag {
            /**
             * Name of the tag. Key is a required field
             */
            key: string;
            /**
             * Value of the tag. Value is a required field
             */
            value: string;
        }

        /**
         * A container that describes additional filters for identifying the source objects that you want to replicate. You can choose to enable or disable the replication of these objects. Currently, Amazon S3 supports only the filter that you can specify for objects created with server-side encryption using a customer master key (CMK) stored in AWS Key Management Service (SSE-KMS).
         */
        export interface BucketSpecForProviderReplicationConfigurationRulesSourceSelectionCriteria {
            /**
             * A container for filter information for the selection of Amazon S3 objects encrypted with AWS KMS. If you include SourceSelectionCriteria in the replication configuration, this element is required.
             */
            sseKmsEncryptedObjects: outputs.s3.v1beta1.BucketSpecForProviderReplicationConfigurationRulesSourceSelectionCriteriaSseKmsEncryptedObjects;
        }

        /**
         * A container for filter information for the selection of Amazon S3 objects encrypted with AWS KMS. If you include SourceSelectionCriteria in the replication configuration, this element is required.
         */
        export interface BucketSpecForProviderReplicationConfigurationRulesSourceSelectionCriteriaSseKmsEncryptedObjects {
            /**
             * Specifies whether Amazon S3 replicates objects created with server-side encryption using a customer master key (CMK) stored in AWS Key Management Service. 
             *  Status is a required field Valid values are "Enabled" or "Disabled"
             */
            status: string;
        }

        /**
         * Specifies default encryption for a bucket using server-side encryption with Amazon S3-managed keys (SSE-S3) or customer master keys stored in AWS KMS (SSE-KMS). For information about the Amazon S3 default encryption feature, see Amazon S3 Default Bucket Encryption (https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-encryption.html) in the Amazon Simple Storage Service Developer Guide.
         */
        export interface BucketSpecForProviderServerSideEncryptionConfiguration {
            /**
             * Container for information about a particular server-side encryption configuration rule.
             */
            rules: outputs.s3.v1beta1.BucketSpecForProviderServerSideEncryptionConfigurationRules[];
        }

        /**
         * ServerSideEncryptionRule Specifies the default server-side encryption configuration.
         */
        export interface BucketSpecForProviderServerSideEncryptionConfigurationRules {
            /**
             * Specifies the default server-side encryption to apply to new objects in the bucket. If a PUT Object request doesn't specify any server-side encryption, this default encryption will be applied.
             */
            applyServerSideEncryptionByDefault: outputs.s3.v1beta1.BucketSpecForProviderServerSideEncryptionConfigurationRulesApplyServerSideEncryptionByDefault;
        }

        /**
         * Specifies the default server-side encryption to apply to new objects in the bucket. If a PUT Object request doesn't specify any server-side encryption, this default encryption will be applied.
         */
        export interface BucketSpecForProviderServerSideEncryptionConfigurationRulesApplyServerSideEncryptionByDefault {
            /**
             * AWS Key Management Service (KMS) customer master key ID to use for the default encryption. This parameter is allowed if and only if SSEAlgorithm is set to aws:kms. 
             *  You can specify the key ID or the Amazon Resource Name (ARN) of the CMK. However, if you are using encryption with cross-account operations, you must use a fully qualified CMK ARN. For more information, see Using encryption for cross-account operations (https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-encryption.html#bucket-encryption-update-bucket-policy). 
             *  For example: 
             *     * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab 
             *     * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab 
             *  Amazon S3 only supports symmetric CMKs and not asymmetric CMKs. For more information, see Using Symmetric and Asymmetric Keys (https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html) in the AWS Key Management Service Developer Guide.
             */
            kmsMasterKeyId?: string;
            /**
             * Server-side encryption algorithm to use for the default encryption. Options are AES256 or aws:kms
             */
            sseAlgorithm: string;
        }

        /**
         * Sets the tags for a bucket. Use tags to organize your AWS bill to reflect your own cost structure. For more information, see Billing and usage reporting for S3 buckets. (https://docs.aws.amazon.com/AmazonS3/latest/dev/BucketBilling.html) in the Amazon Simple Storage Service Developer Guide.
         */
        export interface BucketSpecForProviderTagging {
            /**
             * A collection for a set of tags TagSet is a required field
             */
            tagSet: outputs.s3.v1beta1.BucketSpecForProviderTaggingTagSet[];
        }

        /**
         * Tag is a container for a key value name pair.
         */
        export interface BucketSpecForProviderTaggingTagSet {
            /**
             * Name of the tag. Key is a required field
             */
            key: string;
            /**
             * Value of the tag. Value is a required field
             */
            value: string;
        }

        /**
         * VersioningConfiguration describes the versioning state of an Amazon S3 bucket. See the AWS API reference guide for Amazon Simple Storage Service's API operation PutBucketVersioning for usage and error information. See also, https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/PutBucketVersioning
         */
        export interface BucketSpecForProviderVersioningConfiguration {
            /**
             * MFADelete specifies whether MFA delete is enabled in the bucket versioning configuration. This element is only returned if the bucket has been configured with MFA delete. If the bucket has never been so configured, this element is not returned.
             */
            mfaDelete?: string;
            /**
             * Status is the desired versioning state of the bucket.
             */
            status?: string;
        }

        /**
         * Specifies website configuration parameters for an Amazon S3 bucket. See the AWS API reference guide for Amazon Simple Storage Service's API operation PutBucketWebsite for usage and error information. See also, https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/PutBucketWebsite
         */
        export interface BucketSpecForProviderWebsiteConfiguration {
            /**
             * The name of the error document for the website.
             */
            errorDocument?: outputs.s3.v1beta1.BucketSpecForProviderWebsiteConfigurationErrorDocument;
            /**
             * The name of the index document for the website.
             */
            indexDocument?: outputs.s3.v1beta1.BucketSpecForProviderWebsiteConfigurationIndexDocument;
            /**
             * The redirect behavior for every request to this bucket's website endpoint. If you specify this property, you can't specify any other property.
             */
            redirectAllRequestsTo?: outputs.s3.v1beta1.BucketSpecForProviderWebsiteConfigurationRedirectAllRequestsTo;
            /**
             * Rules that define when a redirect is applied and the redirect behavior.
             */
            routingRules?: outputs.s3.v1beta1.BucketSpecForProviderWebsiteConfigurationRoutingRules[];
        }

        /**
         * The name of the error document for the website.
         */
        export interface BucketSpecForProviderWebsiteConfigurationErrorDocument {
            /**
             * The object key name to use when a 4XX class error occurs.
             */
            key: string;
        }

        /**
         * The name of the index document for the website.
         */
        export interface BucketSpecForProviderWebsiteConfigurationIndexDocument {
            /**
             * A suffix that is appended to a request that is for a directory on the website endpoint (for example,if the suffix is index.html and you make a request to samplebucket/images/ the data that is returned will be for the object with the key name images/index.html) The suffix must not be empty and must not include a slash character.
             */
            suffix: string;
        }

        /**
         * The redirect behavior for every request to this bucket's website endpoint. If you specify this property, you can't specify any other property.
         */
        export interface BucketSpecForProviderWebsiteConfigurationRedirectAllRequestsTo {
            /**
             * Name of the host where requests are redirected.
             */
            hostName: string;
            /**
             * Protocol to use when redirecting requests. The default is the protocol that is used in the original request.
             */
            protocol: string;
        }

        /**
         * RoutingRule specifies the redirect behavior and when a redirect is applied.
         */
        export interface BucketSpecForProviderWebsiteConfigurationRoutingRules {
            /**
             * A container for describing a condition that must be met for the specified redirect to apply. For example, 1. If request is for pages in the /docs folder, redirect to the /documents folder. 2. If request results in HTTP error 4xx, redirect request to another host where you might process the error.
             */
            condition?: outputs.s3.v1beta1.BucketSpecForProviderWebsiteConfigurationRoutingRulesCondition;
            /**
             * Container for redirect information. You can redirect requests to another host, to another page, or with another protocol. In the event of an error, you can specify a different error code to return.
             */
            redirect: outputs.s3.v1beta1.BucketSpecForProviderWebsiteConfigurationRoutingRulesRedirect;
        }

        /**
         * A container for describing a condition that must be met for the specified redirect to apply. For example, 1. If request is for pages in the /docs folder, redirect to the /documents folder. 2. If request results in HTTP error 4xx, redirect request to another host where you might process the error.
         */
        export interface BucketSpecForProviderWebsiteConfigurationRoutingRulesCondition {
            /**
             * The HTTP error code when the redirect is applied. In the event of an error, if the error code equals this value, then the specified redirect is applied. Required when parent element Condition is specified and sibling KeyPrefixEquals is not specified. If both are specified, then both must be true for the redirect to be applied.
             */
            httpErrorCodeReturnedEquals?: string;
            /**
             * The object key name prefix when the redirect is applied. For example, to redirect requests for ExamplePage.html, the key prefix will be ExamplePage.html. To redirect request for all pages with the prefix docs/, the key prefix will be /docs, which identifies all objects in the docs/ folder. Required when the parent element Condition is specified and sibling HttpErrorCodeReturnedEquals is not specified. If both conditions are specified, both must be true for the redirect to be applied.
             */
            keyPrefixEquals?: string;
        }

        /**
         * Container for redirect information. You can redirect requests to another host, to another page, or with another protocol. In the event of an error, you can specify a different error code to return.
         */
        export interface BucketSpecForProviderWebsiteConfigurationRoutingRulesRedirect {
            /**
             * The HTTP redirect code to use on the response. Not required if one of the siblings is present.
             */
            httpRedirectCode?: string;
            /**
             * The host name to use in the redirect request.
             */
            keyPrefixEquals?: string;
            /**
             * Protocol to use when redirecting requests. The default is the protocol that is used in the original request.
             */
            protocol: string;
            /**
             * The object key prefix to use in the redirect request. For example, to redirect requests for all pages with prefix docs/ (objects in the docs/ folder) to documents/, you can set a condition block with KeyPrefixEquals set to docs/ and in the Redirect set ReplaceKeyPrefixWith to /documents. Not required if one of the siblings is present. Can be present only if ReplaceKeyWith is not provided.
             */
            replaceKeyPrefixWith?: string;
            /**
             * The specific object key to use in the redirect request. For example, redirect request to error.html. Not required if one of the siblings is present. Can be present only if ReplaceKeyPrefixWith is not provided.
             */
            replaceKeyWith?: string;
        }

        /**
         * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
         */
        export interface BucketSpecProviderConfigRef {
            /**
             * Name of the referenced object.
             */
            name: string;
        }

        /**
         * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
         */
        export interface BucketSpecProviderRef {
            /**
             * Name of the referenced object.
             */
            name: string;
        }

        /**
         * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
         */
        export interface BucketSpecWriteConnectionSecretToRef {
            /**
             * Name of the secret.
             */
            name: string;
            /**
             * Namespace of the secret.
             */
            namespace: string;
        }

        /**
         * BucketStatus represents the observed state of the Bucket.
         */
        export interface BucketStatus {
            /**
             * BucketExternalStatus keeps the state for the external resource
             */
            atProvider: outputs.s3.v1beta1.BucketStatusAtProvider;
            /**
             * Conditions of the resource.
             */
            conditions?: outputs.s3.v1beta1.BucketStatusConditions[];
        }

        /**
         * BucketExternalStatus keeps the state for the external resource
         */
        export interface BucketStatusAtProvider {
            /**
             * ARN is the Amazon Resource Name (ARN) specifying the S3 Bucket. For more information about ARNs and how to use them, see S3 Resources (https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html) in the Amazon Simple Storage Service guide.
             */
            arn: string;
        }

        /**
         * A Condition that may apply to a resource.
         */
        export interface BucketStatusConditions {
            /**
             * LastTransitionTime is the last time this condition transitioned from one status to another.
             */
            lastTransitionTime: string;
            /**
             * A Message containing details about this condition's last transition from one status to another, if any.
             */
            message?: string;
            /**
             * A Reason for this condition's last transition from one status to another.
             */
            reason: string;
            /**
             * Status of this condition; is it currently True, False, or Unknown?
             */
            status: string;
            /**
             * Type of this condition. At most one of each condition type may apply to a resource at any point in time.
             */
            type: string;
        }
    }
}
